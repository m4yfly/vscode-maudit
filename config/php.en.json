[
    {
        "type_name": "File inclusion",
        "regex": "\\b(include|include_once|require|require_once|parsekit_compile_file|php_check_syntax|runkit_import|virtual)(\\s{1,5}|\\s{0,5}\\().{0,60}\\$(?!.*(this->))\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "There are variables in the file include function, there may be a file include vulnerability"
    },
    {
        "type_name": "Code execution",
        "regex": "\\bpreg_replace\\(\\s{0,5}.*/[is]{0,2}e[is]{0,2}[\"']\\s{0,5},(.*\\$.*,|.*,.*\\$)",
        "description": "/e mode of preg_replace, with controllable variables, code execution vulnerability may exist"
    },
    {
        "type_name": "Sensitive information disclosure",
        "regex": "\\bphpinfo\\s{0,5}\\(\\s{0,5}\\)",
        "description": "phpinfo () function, there may be sensitive information disclosure vulnerability"
    },
    {
        "type_name": "Code execution",
        "regex": "\\bcall_user_func(_array){0,1}\\(\\s{0,5}\\$\\w{1,15}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "call_user_func function parameter contains variables, code execution vulnerability may exist"
    },
    {
        "type_name": "Arbitrary file read",
        "regex": "\\b(file_get_contents|fopen|readfile|fgets|fgetss|fread|parse_ini_file|highlight_file|fgetss|show_source)\\s{0,5}\\(.{0,40}\\$\\w{1,15}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "Variable exists in read file function, there may be arbitrary file read vulnerability"
    },
    {
        "type_name": "Command execution",
        "regex": "\\b(system|passthru|pcntl_exec|shell_exec|escapeshellcmd|exec|proc_open|popen|expect_popen)\\s{0,10}\\(.{0,40}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "There are variables in the command execution function, there may be arbitrary command execution vulnerabilities"
    },
    {
        "type_name": "Variable coverage",
        "regex": "\\b(mb_){0,1}parse_str\\s{0,10}\\(.{0,40}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "There are variables in the parse_str function, there may be a variable coverage vulnerability"
    },
    {
        "type_name": "Variable coverage",
        "regex": "\\${{0,1}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}\\s{0,4}=\\s{0,4}.{0,20}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "Double $$ symbol may have variable coverage vulnerability"
    },
    {
        "type_name": "SQL injection",
        "regex": "[\"'](HTTP_CLIENT_IP|HTTP_X_FORWARDED_FOR|HTTP_REFERER)[\"']",
        "description": "The method of obtaining the IP address can be forged, HTTP_REFERER can be forged, and SQL injection and other vulnerabilities are commonly caused."
    },
    {
        "type_name": "Arbitrary file read / delete / modify / write",
        "regex": "\\b(unlink|copy|fwrite|file_put_contents|bzopen)\\s{0,10}\\(.{0,40}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "There are variables in the file operation function, and there may be any file read / delete / modify / write vulnerabilities"
    },
    {
        "type_name": "Variable coverage",
        "regex": "\\b(extract)\\s{0,5}\\(.{0,30}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}\\s{0,5},{0,1}\\s{0,5}(EXTR_OVERWRITE){0,1}\\s{0,5}\\)",
        "description": "There are variables in the extract function, and there may be a variable coverage vulnerability"
    },
    {
        "type_name": "Code execution",
        "regex": "\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}\\s{0,5}\\(\\s{0,5}\\$_(POST|GET|REQUEST|SERVER)\\[.{1,20}\\]",
        "description": "There may be a code execution vulnerability, or here is a backdoor"
    },
    {
        "type_name": "GPC bypass",
        "regex": "^(?!.*\\baddslashes).{0,40}\\b((raw){0,1}urldecode|stripslashes)\\s{0,5}\\(.{0,60}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "urldecode bypasses GPC, stripslashes will cancel GPC escape characters"
    },
    {
        "type_name": "Command execution",
        "regex": "`\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}`",
        "description": "``Backquotes contain variables, and controllable variables can lead to command execution vulnerabilities"
    },
    {
        "type_name": "Code execution",
        "regex": "\\barray_map\\s{0,4}\\(\\s{0,4}.{0,20}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}\\s{0,4}.{0,20},",
        "description": "The array_map parameter contains variables. Controllable variables may lead to code execution vulnerabilities."
    },
    {
        "type_name": "SQL injection",
        "regex": "select\\s{1,4}.{1,60}from.{1,50}\\bwhere\\s{1,3}.{1,50}=[\"\\s\\.]{0,10}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "The condition variable in the SQL statement select is not protected by single quotes, and there may be a SQL injection vulnerability"
    },
    {
        "type_name": "SQL injection",
        "regex": "delete\\s{1,4}from.{1,20}\\bwhere\\s{1,3}.{1,30}=[\"\\s\\.]{0,10}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "The condition variable in the SQL statement delete is not protected by single quotes, and there may be a SQL injection vulnerability"
    },
    {
        "type_name": "SQL injection",
        "regex": "insert\\s{1,5}into\\s{1,5}.{1,60}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "The condition variable in the SQL statement insert is not protected by single quotes, and there may be a SQL injection vulnerability"
    },
    {
        "type_name": "SQL injection",
        "regex": "update\\s{1,4}.{1,30}\\s{1,3}set\\s{1,5}.{1,60}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "The condition variable in the SQL statement update is not protected by single quotes, and there may be a SQL injection vulnerability"
    },
    {
        "type_name": "Code execution",
        "regex": "\\b(eval|assert)\\s{0,10}\\(.{0,60}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "Variables in eval or assert function, code execution vulnerabilities may exist"
    },
    {
        "type_name": "XSS",
        "regex": "\\b(echo|print|print_r|exit|die|printf|vprintf|trigger_error|user_error|odbc_result_all|ovrimos_result_all|ifx_htmltbl_result)\\s{0,5}\\({0,1}.{0,60}\\$_(POST|GET|REQUEST|SERVER)",
        "description": "There are controllable variables in the output such as echo, there may be XSS vulnerabilities"
    },
    {
        "type_name": "Arbitrary Jump or HTTP Header Pollution",
        "regex": "(\\bheader\\s{0,5}\\(.{0,30}|window.location.href\\s{0,5}=\\s{0,5})\\$_(POST|GET|REQUEST|SERVER)",
        "description": "The header function or js location has controllable parameters, and there is an arbitrary jump or http header pollution vulnerability"
    },
    {
        "type_name": "File upload exists",
        "regex": "\\bmove_uploaded_file\\s{0,5}\\(",
        "description": "File upload exists, pay attention to whether the upload type is controllable"
    },
    {
        "type_name": "SSRF",
        "regex": "\\bcurl_setopt\\s*?\\(.*,\\s*CURLOPT_URL\\s*,\\s{0,10}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}\\)",
        "description": "curl parameter contains variables, SSRF vulnerability may exist"
    },
    {
        "type_name": "SSRF",
        "regex": "\\bget_headers\\s*?\\(\\s{0,10}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "get_headers parameter contains variables, SSRF vulnerability may exist"
    },
    {
        "type_name": "SSRF",
        "regex": "\\bfsockopen\\s*?\\(\\s{0,10}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "fsockopen parameter contains variables, SSRF vulnerability may exist"
    },
    {
        "type_name": "LDAP injection",
        "regex": "\\bldap_search\\s*?\\(.*?,.*?,\\s{0,10}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "ldap_search parameter contains variables, LDAP injection vulnerability may exist"
    },
    {
        "type_name": "XXE",
        "regex": "\\b(simplexml_load_file|simplexml_load_string)\\s*?\\(\\s{0,10}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "simplexml_load_string and other function parameters contain variables, there may be XXE vulnerabilities"
    },
    {
        "type_name": "Command execution",
        "regex": "\\bssh2_exec\\s*?\\(.*?,[\"']\\s{0,10}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}[\"']",
        "description": "There are variables in the command execution function, there may be arbitrary command execution vulnerabilities"
    },
    {
        "type_name": "Unsafe random number",
        "regex": "\\buniqid\\s?\\(",
        "description": "uniqid is generated based on timestamps and belongs to a pseudo-random generator. It is not recommended"
    },
    {
        "type_name": "Deserialization",
        "regex": "\\bunserialize\\s*?\\(\\s{0,10}\\$\\w{1,20}((\\[[\"']|\\[)\\${0,1}[\\w\\[\\]\"']{0,30}){0,1}",
        "description": "unserialize parameter contains variables, which may have a deserialization vulnerability"
    },
    {
        "type_name": "Variable coverage",
        "regex": "\\bimport_request_variables\\s*?\\(",
        "description": "import_request_variables was called, there may be a variable coverage vulnerability"
    },
    {
        "type_name": "Env. Variable coverage",
        "regex": "\\bputenv\\s*?\\(\\s{0,10}\\$\\w{1,30}",
        "description": "putenv was called, there may be a variable coverage vulnerability"
    },
    {
        "type_name": "Code execution vulnerabilities may exist",
        "regex": "\\b(create_function|array_filter|usort|uasort)\\s{0,10}\\(.{0,60}\\$\\w{1,20}",
        "description": "code execution vulnerabilities may exist"
    },
    {
        "type_name": "Weakly typed comparison",
        "regex": "\\bsha1\\s*?\\(\\s{0,10}\\$\\w{1,30}",
        "description": "If the passed value is an array, it may cause bypass"
    },
    {
        "type_name": "Weakly typed comparison",
        "regex": "(\\$\\w{1,30}\\s*?(==|!=)\\s*?\\md5\\(|\\bmd5\\(.{1,30}(==|!=)\\s*?\\$\\w{1,30})",
        "description": "There may be weakly typed comparisons"
    },
    {
        "type_name": "Weakly typed comparison",
        "regex": "(\\$\\w{1,30}\\s*?(==|!=)\\s*?\\d+|\\d+\\s*?(==|!=)\\s*?\\$\\w{1,30})",
        "description": "There may be weakly typed comparisons"
    },
    {
        "type_name": "Weakly typed comparison",
        "regex": "\\b(is_numeric|in_array)\\s*?\\(\\s{0,10}\\$\\w{1,30}",
        "description": "There may be weakly typed comparisons"
    },
    {
        "type_name": "phar deserialization",
        "regex": "\\b(fileatime|filectime|file_exists|file_get_contents|file_put_contents|file|filegroup|fopen)\\s*?\\(\\s{0,10}\\$\\w{1,30}",
        "description": "There may be phar deserialization"
    },
    {
        "type_name": "phar deserialization",
        "regex": "\\b(fileinode|filemtime|fileowner|fileperms|is_dir|is_executable|is_file|is_link)\\s*?\\(\\s{0,10}\\$\\w{1,30}",
        "description": "There may be phar deserialization"
    },
    {
        "type_name": "phar deserialization",
        "regex": "\\b(is_readable|is_writable|is_writeable|parse_ini_file|copy|unlink|stat|readfile)\\s*?\\(\\s{0,10}\\$\\w{1,30}",
        "description": "There may be phar deserialization"
    }
]